#!/usr/bin/env node

'use strict';

var argv = require('minimist')(process.argv.slice(2), {
        boolean: 'json'
    }),
    concat = require('concat-stream'),
    fs = require('fs'),
    jsonlint = require('jsonlint-lines'),
    validate = require('../lib/validate');

if (argv.help || argv.h || (!argv._.length && process.stdin.isTTY)) {
    return help();
}

((argv._[0] && fs.createReadStream(argv._[0])) || process.stdin).pipe(concat(openData));

function openData(data) {
    var v;
    try {
        var style = jsonlint.parse(data.toString());
        v = 'v' + style.version;
    } catch(e) {
        var match = e.message.match(/line (\d+)/),
            lineNumber = 0;
        if (match) lineNumber = parseInt(match[1], 10);
        return console.log('line %s, %s', (''+lineNumber-1), e.message);
    }

    if (typeof validate[v] === 'undefined') {
        return console.log('version ' + v + ' not supported');
    }

    var errors = validate[v](data);
    if (errors.length) {
        if (argv.json) {
            process.stdout.write(JSON.stringify(errors, null, 2));
        } else {
            errors.forEach(function(e) {
                console.log('line %s, %s', (''+e.line), e.message);
            });
        }
        process.exit(1);
    } else {
        process.exit(0);
    }
}

function help() {
    console.log('usage:');
    console.log('  gl-style-validate file.json');
    console.log('  gl-style-validate < file.json');
    console.log('');
    console.log('options:');
    console.log('--json  output errors as json');
    return;
}
